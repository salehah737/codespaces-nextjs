// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  cart          Cart?
  mechanic      Mechanic?
  reviews       Review[]    @relation("UserReviews")
  receivedReviews Review[]  @relation("ReceivedReviews")
}

enum UserRole {
  CUSTOMER
  MECHANIC
  SELLER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String   @default("SHIPPING")
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  price       Decimal       @db.Decimal(10, 2)
  images      String[]
  category    String
  stock       Int           @default(0)
  sellerId    String?
  type        ProductType   @default(PART)
  condition   String?
  make        String?
  model       String?
  year        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

enum ProductType {
  PART
  VEHICLE
  SERVICE
}

model Mechanic {
  id          String   @id @default(cuid())
  userId      String   @unique
  specialty   String?
  experience  Int?     @default(0) // Years of experience
  hourlyRate  Decimal? @db.Decimal(10, 2)
  availability String?
  location    Json?    // Stores lat/lng coordinates
  services    String[] // Array of service types offered
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    ServiceBooking[]
}

model ServiceBooking {
  id          String   @id @default(cuid())
  mechanicId  String
  customerId  String
  serviceType String
  date        DateTime
  status      BookingStatus @default(PENDING)
  price       Decimal? @db.Decimal(10, 2)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  mechanic    Mechanic @relation(fields: [mechanicId], references: [id])
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  addressId     String?
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  address       Address?    @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  services      ServiceBooking[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  userId      String   // User who wrote the review
  targetId    String   // User who received the review
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  target      User     @relation("ReceivedReviews", fields: [targetId], references: [id], onDelete: Cascade)
}